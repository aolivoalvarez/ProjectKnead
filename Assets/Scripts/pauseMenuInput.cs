//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/pauseMenuInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PauseMenuInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PauseMenuInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""pauseMenuInput"",
    ""maps"": [
        {
            ""name"": ""pauseMenu"",
            ""id"": ""86dca960-698c-4e26-8cb7-0c11d99b646d"",
            ""actions"": [
                {
                    ""name"": ""pressButton"",
                    ""type"": ""Button"",
                    ""id"": ""0674acab-da5f-4918-b68a-953c17814e83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ba368b98-701e-4c08-8fe2-1eaf5848353e"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pressButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // pauseMenu
        m_pauseMenu = asset.FindActionMap("pauseMenu", throwIfNotFound: true);
        m_pauseMenu_pressButton = m_pauseMenu.FindAction("pressButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // pauseMenu
    private readonly InputActionMap m_pauseMenu;
    private IPauseMenuActions m_PauseMenuActionsCallbackInterface;
    private readonly InputAction m_pauseMenu_pressButton;
    public struct PauseMenuActions
    {
        private @PauseMenuInput m_Wrapper;
        public PauseMenuActions(@PauseMenuInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @pressButton => m_Wrapper.m_pauseMenu_pressButton;
        public InputActionMap Get() { return m_Wrapper.m_pauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void SetCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterface != null)
            {
                @pressButton.started -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnPressButton;
                @pressButton.performed -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnPressButton;
                @pressButton.canceled -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnPressButton;
            }
            m_Wrapper.m_PauseMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @pressButton.started += instance.OnPressButton;
                @pressButton.performed += instance.OnPressButton;
                @pressButton.canceled += instance.OnPressButton;
            }
        }
    }
    public PauseMenuActions @pauseMenu => new PauseMenuActions(this);
    public interface IPauseMenuActions
    {
        void OnPressButton(InputAction.CallbackContext context);
    }
}
